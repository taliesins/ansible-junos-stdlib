#!/usr/bin/env python

# Copyright (c) 1999-2017, Interxion.
#               2017, Taliesin Sisson & Ravindrakumar Solanki
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_space_get_devices
author: Taliesin Sisson & Ravindrakumar Solanki, Interxion
version_added: "1.0.0"
short_description: Retrieve devices from Space.
description:
    - Retrieve devices registered with Space.
requirements:
    - space-ez
options:
    uri:
        description:
            - Set to space uri
        required: true
    user:
        description:
            - Space login username
        required: false
        default: $USER
    passwd:
        description:
            - Space login password
        required: true
    savedir:
        description:
            - Path to the local server directory where device fact
              files will be stored. Resulting file will be
              I(savedir/hostname-facts.json)
        required: false
        default: $CWD
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes. This option is used only with the
              I(console) option.
        required: false
        default: None
'''

EXAMPLES = '''
# retrieve devices
# space login, with default password

- junos_space_get_facts:
    uri=https://space.example.com/
    user=super
    pwd=abc123
    savedir=/usr/local/junos/inventory
  register: spaceos

# access the facts

- name: devices
  debug: msg="{{ spaceos }}"

'''

import os
import json
from distutils.version import LooseVersion

def main():
    module = AnsibleModule(
        argument_spec=dict(
            uri=dict(required=True),
            logfile=dict(required=False, default=None),
            savedir=dict(required=False, default=None),
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=True, no_log=True)),
        supports_check_mode=True)

    m_args = module.params
    m_results = dict(changed=False)

    try:
        from jnpr.space import rest
    except ImportError as ex:
        module.fail_json(msg='ImportError: %s' % ex.message)

    import logging

    logfile = m_args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO, format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'SPACE:' + module.params['uri']

        def log_notify(self, event, message):
            logging.info("%s:%s" % (event, message))
        use_notifier = log_notify
    else:
        def silent_notify(self, event, message):
            pass
        use_notifier = silent_notify

    try:
        spc = rest.Space(m_args['uri'], m_args['user'], m_args['passwd'])
        devices = spc.device_management.devices.get()
        devices_list_dto = []
        for device in devices:
            devices_list_dto.append(dict(domain_name=str(device.domain_name), name=str(device.name), ipAddr=str(device.ipAddr)))
    except Exception as err:
        msg = 'unable to connect to {0}: {1}'.format(m_args['uri'], str(err))
        module.fail_json(msg=msg)
        return

    if m_args['savedir'] is not None:
        fname = "{0}/space-{1}-devices.json".format(m_args['savedir'], m_args['uri'])
        with open(fname, 'w') as factfile:
            json.dump(devices_list_dto, factfile)

    m_results['args'] = m_args
    m_results['facts'] = json.dumps(devices_list_dto)

    module.exit_json(**m_results)

from ansible.module_utils.basic import *
main()